// üéØ Danh s√°ch ph·∫ßn th∆∞·ªüng v√† s·ªë l∆∞·ª£ng
const prizeData = [
  { name: "D√¢y ƒëeo Comandante", qty: 50 },
  { name: "V√≤ng tay Comandante", qty: 50 },
  { name: "B·ªô Sticker", qty: 50 },
  { name: "Ghim c√†i Comandante", qty: 5 },
  { name: "T√∫i c√† ph√™ L√∫ave (Phin)", qty: 3 },
  { name: "Tool Bag Comandante", qty: 10 },
  { name: "Khay cafe Comandante nh·ªè", qty: 5 },
  { name: "Khay cafe Comandante l·ªõn", qty: 4 },
  { name: "√Åo thun Comandante", qty: 5 },
  { name: "S√°ch Atlas Coffee Worlds", qty: 1 },
];
// üéØ √Åp d·ª•ng c√¥ng th·ª©c l≈©y th·ª´a ƒë·ªÉ tƒÉng x√°c su·∫•t v·∫≠t ph·∫©m nhi·ªÅu
// const exponent = 1.5;
// let weights = prizeData.map((p) => Math.pow(p.qty, exponent));
let weights = prizeData.map((p) => p.qty);
const totalWeight = weights.reduce((a, b) => a + b, 0);
weights = weights.map((w) => w / totalWeight);

const prizes = prizeData.map((p) => p.name);
const wheel = document.getElementById("wheel");
const spinBtn = document.getElementById("spinBtn");
const result = document.getElementById("result");

const segCount = prizes.length;
const segAngle = 360 / segCount;
const radius = 280;

// üé® V·∫Ω c√°c √¥ b√°nh xe
wheel.innerHTML = "";
let startAngle = 0;
for (let i = 0; i < segCount; i++) {
  const endAngle = startAngle + segAngle;
  const largeArc = segAngle > 180 ? 1 : 0;
  const x1 = Math.cos((startAngle * Math.PI) / 180) * radius;
  const y1 = Math.sin((startAngle * Math.PI) / 180) * radius;
  const x2 = Math.cos((endAngle * Math.PI) / 180) * radius;
  const y2 = Math.sin((endAngle * Math.PI) / 180) * radius;
  const path = `M0,0 L${x1},${y1} A${radius},${radius} 0 ${largeArc} 1 ${x2},${y2} Z`;
  const color = i % 2 === 0 ? "var(--blue)" : "#ffffff";
  const textColor = i % 2 === 0 ? "#ffffff" : "#1B1C72";

  const seg = document.createElementNS("http://www.w3.org/2000/svg", "path");
  seg.setAttribute("d", path);
  seg.setAttribute("fill", color);
  seg.setAttribute("stroke", "rgba(0,0,0,0.05)");
  seg.setAttribute("data-index", i);
  wheel.appendChild(seg);

  // üè∑Ô∏è Nh√£n ph·∫ßn th∆∞·ªüng
  const mid = startAngle + segAngle / 2;
  const labelRadius = 180;
  const lx = Math.cos((mid * Math.PI) / 180) * labelRadius;
  const ly = Math.sin((mid * Math.PI) / 180) * labelRadius;
  const text = document.createElementNS("http://www.w3.org/2000/svg", "text");
  text.setAttribute("x", lx);
  text.setAttribute("y", ly);
  text.setAttribute("fill", textColor);
  text.setAttribute("font-size", "14");
  text.setAttribute("font-weight", "600");
  text.setAttribute("text-anchor", "middle");
  text.setAttribute("alignment-baseline", "middle");
  text.setAttribute("transform", `rotate(${mid},${lx},${ly})`);
  text.textContent = prizes[i];
  wheel.appendChild(text);
  startAngle += segAngle;
}

let spinning = false;
let rotation = 0;

function clearHighlights() {
  [...wheel.querySelectorAll("path")].forEach((p) => {
    p.style.filter = "";
    p.style.stroke = "rgba(0,0,0,0.05)";
    p.style.strokeWidth = "";
  });
}

function highlightSegment(index) {
  clearHighlights();
  const seg = wheel.querySelector(`path[data-index='${index}']`);
  if (seg) {
    seg.style.filter = "drop-shadow(0 8px 20px rgba(11,20,70,0.25))";
    seg.style.stroke = "#ffb547";
    seg.style.strokeWidth = "4";
  }
}

// üìå H√†m random c√≥ tr·ªçng s·ªë
function weightedRandom(weights) {
  const r = Math.random();
  let sum = 0;
  for (let i = 0; i < weights.length; i++) {
    sum += weights[i];
    if (r <= sum) return i;
  }
  return weights.length - 1;
}

spinBtn.addEventListener("click", () => {
  if (spinning) return;
  spinning = true;
  result.style.display = "none";
  clearHighlights();

  const chosenIndex = weightedRandom(weights);

  // ‚≠êÔ∏è S·ª¨A L·ªñI 1: M≈©i t√™n ·ªü 12 gi·ªù l√† 90 ƒë·ªô
  const pointerAngle = 270;
  const segMid = chosenIndex * segAngle + segAngle / 2;

  // ‚≠êÔ∏è S·ª¨A L·ªñI 2: C√¥ng th·ª©c t√≠nh baseRot (g√≥c quay (mod 360) mong mu·ªën)
  // R = (pointerAngle - segMid + 360) % 360
  const baseRot = (pointerAngle - segMid + 360) % 360;

  const fullSpins = 6 + Math.floor(Math.random() * 3);
  const jitter = Math.random() * 30 - 15;
  let targetRotation = fullSpins * 360 + baseRot + jitter;

  // ‚≠êÔ∏è S·ª¨A L·ªñI 3: ƒê·∫£m b·∫£o b√°nh xe lu√¥n quay t·ªõi v√† quay ƒë·ªß v√≤ng
  // G√≥c quay m·ªõi ph·∫£i l·ªõn h∆°n g√≥c quay c≈©
  while (targetRotation < rotation + 2160) {
    // 2160 = 6 * 360 (th√™m 6 v√≤ng)
    targetRotation += 360;
  }

  // G√ÅN gi√° tr·ªã tuy·ªát ƒë·ªëi m·ªõi, KH√îNG C·ªòNG D·ªíN
  rotation = targetRotation;

  console.log("üéØ BEFORE SPIN", {
    chosenIndex,
    segMid,
    baseRot: (baseRot + 360) % 360, // baseRot c√≥ th·ªÉ √¢m, chu·∫©n h√≥a cho log
    targetRotation,
    rotationAfter: rotation,
  });
  wheel.style.transition = "transform 5s cubic-bezier(.17,.67,.32,1.25)";
  wheel.style.transform = `rotate(${rotation}deg)`;

  setTimeout(() => {
    spinning = false;

    // L·∫•y g√≥c quay chu·∫©n h√≥a trong 0‚Äì360
    const normalized = (rotation % 360 + 360) % 360;

    // ‚≠êÔ∏è S·ª¨A L·ªñI 4: T√≠nh to√°n g√≥c t·∫°i m≈©i t√™n
    // V·ªã tr√≠ c≈© = (V·ªã tr√≠ m·ªõi - g√≥c quay + 360) % 360
    const angleAtPointer = (pointerAngle - normalized + 360) % 360;

    // T√≠nh √¥ tr√∫ng (theo h∆∞·ªõng tƒÉng d·∫ßn t·ª´ 0¬∞ ·ªü b√™n ph·∫£i)
    const winningIndex = Math.floor(angleAtPointer / segAngle) % segCount;

    console.log("üõë AFTER SPIN", {
      normalized,
      angleAtPointer,
      winningIndex,
      expected: chosenIndex,
      correct: winningIndex === chosenIndex,
    });

    highlightSegment(winningIndex);
    const prize = prizes[winningIndex];
    result.textContent = `üéâ B·∫°n tr√∫ng: ${prize}!`;
    result.style.display = "block";
  }, 5200);
});

// ‚ö†Ô∏è L∆ØU √ù: H√†m testWheel c≈©ng c·∫ßn s·ª≠a t∆∞∆°ng t·ª± (L·ªói 1, 2, 4) n·∫øu b·∫°n mu·ªën d√πng
function testWheel(iterations = 1000) {
  let correct = 0;
  let results = Array(prizes.length).fill(0);
  
  // S·ª¨A L·ªñI 1 (trong test)
  const pointerAngle = 270;
  const segAngle = 360 / prizes.length;

  for (let i = 0; i < iterations; i++) {
    const chosenIndex = weightedRandom(weights);
    const segMid = chosenIndex * segAngle + segAngle / 2;
    
    // S·ª¨A L·ªñI 2 (trong test)
    const baseRot = (pointerAngle - segMid + 360) % 360;
    const spins = Math.floor(Math.random() * 3) + 4;
    const rotation = spins * 360 + baseRot; // Jitter kh√¥ng c·∫ßn thi·∫øt trong test

    const normalized = (rotation % 360 + 360) % 360;
    
    // S·ª¨A L·ªñI 4 (trong test)
    const angleAtPointer = (pointerAngle - normalized + 360) % 360;
    const winningIndex = Math.floor(angleAtPointer / segAngle) % prizes.length;

    results[winningIndex]++;
    if (winningIndex === chosenIndex) correct++;
  }

  console.table(
    results.map((count, i) => ({
      segment: i,
      name: prizes[i],
      count,
      percent: ((count / iterations) * 100).toFixed(2) + "%",
      expected_percent: (weights[i] * 100).toFixed(2) + "%",
    }))
  );

  console.log(`‚úÖ Accuracy: ${(correct / iterations * 100).toFixed(2)}%`); // S·∫Ω l√† 100%
}