// üéØ Danh s√°ch ph·∫ßn th∆∞·ªüng v√† s·ªë l∆∞·ª£ng
const prizeData = [
  { name: "D√¢y ƒëeo Comandante", qty: 50 },
  { name: "V√≤ng tay Comandante", qty: 50 },
  { name: "B·ªô Sticker", qty: 50 },
  { name: "Ghim c√†i Comandante", qty: 5 },
  { name: "T√∫i c√† ph√™ L√∫ave (Phin)", qty: 3 },
  { name: "Tool Bag Comandante", qty: 10 },
  { name: "Khay cafe Comandante nh·ªè", qty: 6 },
  { name: "Khay cafe Comandante l·ªõn", qty: 3 },
  { name: "√Åo thun Comandante", qty: 5 },
  { name: "S√°ch Atlas Coffee Worlds", qty: 1 },
];
// üéØ √Åp d·ª•ng c√¥ng th·ª©c l≈©y th·ª´a ƒë·ªÉ tƒÉng x√°c su·∫•t v·∫≠t ph·∫©m nhi·ªÅu
// const exponent = 1.5;
// let weights = prizeData.map((p) => Math.pow(p.qty, exponent));
let weights = prizeData.map((p) => p.qty);
const totalWeight = weights.reduce((a, b) => a + b, 0);
weights = weights.map((w) => w / totalWeight);

const prizes = prizeData.map((p) => p.name);
const wheel = document.getElementById("wheel");
const spinBtn = document.getElementById("spinBtn");
const result = document.getElementById("result");

const segCount = prizes.length;
const segAngle = 360 / segCount;
const radius = 280;

// üé® V·∫Ω c√°c √¥ b√°nh xe
wheel.innerHTML = "";
let startAngle = 0;
for (let i = 0; i < segCount; i++) {
  const endAngle = startAngle + segAngle;
  const largeArc = segAngle > 180 ? 1 : 0;
  const x1 = Math.cos((startAngle * Math.PI) / 180) * radius;
  const y1 = Math.sin((startAngle * Math.PI) / 180) * radius;
  const x2 = Math.cos((endAngle * Math.PI) / 180) * radius;
  const y2 = Math.sin((endAngle * Math.PI) / 180) * radius;
  const path = `M0,0 L${x1},${y1} A${radius},${radius} 0 ${largeArc} 1 ${x2},${y2} Z`;
  const color = i % 2 === 0 ? "var(--blue)" : "#ffffff";
  const textColor = i % 2 === 0 ? "#ffffff" : "#1B1C72";

  const seg = document.createElementNS("http://www.w3.org/2000/svg", "path");
  seg.setAttribute("d", path);
  seg.setAttribute("fill", color);
  seg.setAttribute("stroke", "rgba(0,0,0,0.05)");
  seg.setAttribute("data-index", i);
  wheel.appendChild(seg);

  // üè∑Ô∏è Nh√£n ph·∫ßn th∆∞·ªüng
  const mid = startAngle + segAngle / 2;
  const labelRadius = 180;
  const lx = Math.cos((mid * Math.PI) / 180) * labelRadius;
  const ly = Math.sin((mid * Math.PI) / 180) * labelRadius;
  const text = document.createElementNS("http://www.w3.org/2000/svg", "text");
  text.setAttribute("x", lx);
  text.setAttribute("y", ly);
  text.setAttribute("fill", textColor);
  text.setAttribute("font-size", "14");
  text.setAttribute("font-weight", "600");
  text.setAttribute("text-anchor", "middle");
  text.setAttribute("alignment-baseline", "middle");
  text.setAttribute("transform", `rotate(${mid},${lx},${ly})`);
  text.textContent = prizes[i];
  wheel.appendChild(text);
  startAngle += segAngle;
}

let spinning = false;
let rotation = 0;

function clearHighlights() {
  [...wheel.querySelectorAll("path")].forEach((p) => {
    p.style.filter = "";
    p.style.stroke = "rgba(0,0,0,0.05)";
    p.style.strokeWidth = "";
  });
}

function highlightSegment(index) {
  clearHighlights();
  const seg = wheel.querySelector(`path[data-index='${index}']`);
  if (seg) {
    seg.style.filter = "drop-shadow(0 8px 20px rgba(11,20,70,0.25))";
    seg.style.stroke = "#ffb547";
    seg.style.strokeWidth = "4";
  }
}

// üìå H√†m random c√≥ tr·ªçng s·ªë
function weightedRandom(weights) {
  const r = Math.random();
  let sum = 0;
  for (let i = 0; i < weights.length; i++) {
    sum += weights[i];
    if (r <= sum) return i;
  }
  return weights.length - 1;
}

spinBtn.addEventListener("click", () => {
  if (spinning) return;
  spinning = true;
  result.style.display = "none";
  clearHighlights();

  const chosenIndex = weightedRandom(weights);

  // ‚≠êÔ∏è S·ª¨A L·ªñI 1: M≈©i t√™n ·ªü 12 gi·ªù l√† 90 ƒë·ªô
  const pointerAngle = 270;
  const segMid = chosenIndex * segAngle + segAngle / 2;

  // ‚≠êÔ∏è S·ª¨A L·ªñI 2: C√¥ng th·ª©c t√≠nh baseRot (g√≥c quay (mod 360) mong mu·ªën)
  // R = (pointerAngle - segMid + 360) % 360
  const baseRot = (pointerAngle - segMid + 360) % 360;

  const fullSpins = 6 + Math.floor(Math.random() * 3);
  const jitter = Math.random() * 30 - 15;
  let targetRotation = fullSpins * 360 + baseRot + jitter;

  // ‚≠êÔ∏è S·ª¨A L·ªñI 3: ƒê·∫£m b·∫£o b√°nh xe lu√¥n quay t·ªõi v√† quay ƒë·ªß v√≤ng
  // G√≥c quay m·ªõi ph·∫£i l·ªõn h∆°n g√≥c quay c≈©
  while (targetRotation < rotation + 2160) {
    // 2160 = 6 * 360 (th√™m 6 v√≤ng)
    targetRotation += 360;
  }

  // G√ÅN gi√° tr·ªã tuy·ªát ƒë·ªëi m·ªõi, KH√îNG C·ªòNG D·ªíN
  rotation = targetRotation;

  console.log("üéØ BEFORE SPIN", {
    chosenIndex,
    segMid,
    baseRot: (baseRot + 360) % 360, // baseRot c√≥ th·ªÉ √¢m, chu·∫©n h√≥a cho log
    targetRotation,
    rotationAfter: rotation,
  });
  wheel.style.transition = "transform 5s cubic-bezier(.17,.67,.32,1.25)";
  wheel.style.transform = `rotate(${rotation}deg)`;

  setTimeout(() => {
    spinning = false;

    // L·∫•y g√≥c quay chu·∫©n h√≥a trong 0‚Äì360
    const normalized = (rotation % 360 + 360) % 360;

    // ‚≠êÔ∏è S·ª¨A L·ªñI 4: T√≠nh to√°n g√≥c t·∫°i m≈©i t√™n
    // V·ªã tr√≠ c≈© = (V·ªã tr√≠ m·ªõi - g√≥c quay + 360) % 360
    const angleAtPointer = (pointerAngle - normalized + 360) % 360;

    // T√≠nh √¥ tr√∫ng (theo h∆∞·ªõng tƒÉng d·∫ßn t·ª´ 0¬∞ ·ªü b√™n ph·∫£i)
    const winningIndex = Math.floor(angleAtPointer / segAngle) % segCount;

    console.log("üõë AFTER SPIN", {
      normalized,
      angleAtPointer,
      winningIndex,
      expected: chosenIndex,
      correct: winningIndex === chosenIndex,
    });

    highlightSegment(winningIndex);
    const prize = prizes[winningIndex];
    result.textContent = `üéâ B·∫°n tr√∫ng: ${prize}!`;
    result.style.display = "block";

    launchFireworks(4000);
  }, 5200);
});

function testWheel(iterations = 1000) {
  const pointerAngle = 270; // m≈©i t√™n ·ªü tr√™n
  const segAngle = 360 / prizeData.length;

  // ‚úÖ T·∫°o danh s√°ch t√™n v√† tr·ªçng s·ªë
  const prizes = prizeData.map(p => p.name);
  const weights = prizeData.map(p => p.qty / prizeData.reduce((a, b) => a + b.qty, 0));

  let correct = 0;
  let results = Array(prizes.length).fill(0);

  for (let i = 0; i < iterations; i++) {
    // ch·ªçn ph·∫ßn th∆∞·ªüng theo t·ªâ l·ªá
    const chosenIndex = weightedRandom(weights);
    const segMid = chosenIndex * segAngle + segAngle / 2;

    // t√≠nh to√°n g√≥c quay ch√≠nh x√°c t·ªõi v·ªã tr√≠ m≈©i t√™n
    const baseRot = (pointerAngle - segMid + 360) % 360;
    const spins = Math.floor(Math.random() * 3) + 4; // quay 4‚Äì6 v√≤ng
    const rotation = spins * 360 + baseRot;

    // chu·∫©n h√≥a g√≥c quay
    const normalized = (rotation % 360 + 360) % 360;

    // g√≥c t·∫°i m≈©i t√™n ƒë·ªÉ x√°c ƒë·ªãnh ph·∫ßn tr√∫ng
    const angleAtPointer = (pointerAngle - normalized + 360) % 360;
    const winningIndex = Math.floor(angleAtPointer / segAngle) % prizes.length;

    results[winningIndex]++;
    if (winningIndex === chosenIndex) correct++;
  }

  console.table(
    results.map((count, i) => ({
      segment: i,
      name: prizes[i],
      count,
      percent: ((count / iterations) * 100).toFixed(2) + "%",
      expected_percent: (weights[i] * 100).toFixed(2) + "%",
    }))
  );

  console.log(`‚úÖ Accuracy: ${(correct / iterations * 100).toFixed(2)}%`);
}

function launchFireworks(duration = 4000) {
  const canvas = document.createElement("canvas");
  const ctx = canvas.getContext("2d");
  canvas.id = "fireworks";
  document.body.appendChild(canvas);
  canvas.width = innerWidth;
  canvas.height = innerHeight;
  canvas.style.position = "fixed";
  canvas.style.left = 0;
  canvas.style.top = 0;
  canvas.style.pointerEvents = "none";
  canvas.style.zIndex = 9999;

  const particles = [];
  const colors = ["#ff0043", "#ffae00", "#00ffcc", "#4dff00", "#ff00ff", "#00b3ff"];

  class Particle {
    constructor(x, y, color) {
      this.x = x;
      this.y = y;
      this.color = color;
      this.radius = Math.random() * 2 + 1;
      const angle = Math.random() * Math.PI * 2;
      const speed = Math.random() * 6 + 2;
      this.vx = Math.cos(angle) * speed;
      this.vy = Math.sin(angle) * speed;
      this.alpha = 1;
      this.decay = 0.015 + Math.random() * 0.02;
      this.gravity = 0.05 + Math.random() * 0.05;
    }

    update() {
      this.x += this.vx;
      this.y += this.vy;
      this.vy += this.gravity;
      this.alpha -= this.decay;
    }

    draw() {
      ctx.globalAlpha = this.alpha;
      const grad = ctx.createRadialGradient(this.x, this.y, 0, this.x, this.y, this.radius * 3);
      grad.addColorStop(0, "white");
      grad.addColorStop(0.2, this.color);
      grad.addColorStop(1, "transparent");
      ctx.fillStyle = grad;
      ctx.beginPath();
      ctx.arc(this.x, this.y, this.radius * 2, 0, Math.PI * 2);
      ctx.fill();
    }
  }

  function explode(x, y) {
    const color = colors[Math.floor(Math.random() * colors.length)];
    for (let i = 0; i < 60; i++) {
      particles.push(new Particle(x, y, color));
    }
  }

  function randomExplosion() {
    const x = Math.random() * canvas.width * 0.8 + canvas.width * 0.1;
    const y = Math.random() * canvas.height * 0.4 + canvas.height * 0.1;
    explode(x, y);
  }

  let running = true;
  const endTime = Date.now() + duration;

  function animate() {
    // üí° KH√îNG t√¥ n·ªÅn ƒëen n·ªØa, ch·ªâ l√†m m·ªù nh·∫π ph√°o hoa c≈©
    ctx.globalCompositeOperation = "destination-out";
    ctx.fillStyle = "rgba(0,0,0,0.2)";
    ctx.fillRect(0, 0, canvas.width, canvas.height);
    ctx.globalCompositeOperation = "lighter";

    particles.forEach((p, i) => {
      p.update();
      p.draw();
      if (p.alpha <= 0) particles.splice(i, 1);
    });

    if (Date.now() < endTime && running) {
      if (Math.random() < 0.08) randomExplosion();
      requestAnimationFrame(animate);
    } else if (particles.length > 0) {
      requestAnimationFrame(animate);
    } else {
      document.body.removeChild(canvas);
    }
  }

  animate();

  window.addEventListener("resize", () => {
    canvas.width = innerWidth;
    canvas.height = innerHeight;
  });
}


